name: CI - Build & Test

on:
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        IMAGE_DIR:
          - aws-ecs-github-runner
          - aws-ecs-unreal-engine-runner
          - aws-ecs-github-runner-nginx
      fail-fast: false
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Taskfile Tools
        id: cache-task-tools
        uses: actions/cache@v3
        with:
          path: |
            /snap/bin/task
            /usr/bin/dive
            /usr/bin/yq
          key: ${{ runner.os }}-task-tools-v1
          restore-keys: |
            ${{ runner.os }}-task-tools-

      - name: Init Environment
        if: steps.cache-task-tools.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
              snapd
          sudo snap install task --classic

          task init
        
      - name: Set Image Name and Test Tag
        run: |
          IMAGE_NAME=$(basename "${{ matrix.IMAGE_DIR }}")

          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=test" >> $GITHUB_ENV

      - name: Determine Cache Source
        run: bash .github/scripts/cache-source.sh "${{ matrix.IMAGE_DIR }}"

      - name: Lint - Enforce Best Practices
        run: task lint IMAGE_DIR=${{ matrix.IMAGE_DIR }}

      - name: Build Docker Image with Remote Cache
        run: bash .github/scripts/build-image.sh
            
      - name: Run Trivy Security Scan
        run: |
          task scan IMAGE_DIR=${{ matrix.IMAGE_DIR }} \
                      IMAGE_NAME=${{ env.IMAGE_NAME }} \
                      IMAGE_TAG=${{ env.IMAGE_TAG }}

      - name: Run Dive Analysis
        run: |
          task dive IMAGE_NAME=${{ env.IMAGE_NAME }} \
                      IMAGE_TAG=${{ env.IMAGE_TAG }}
