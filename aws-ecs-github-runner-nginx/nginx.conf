error_log /dev/stderr debug;

events { 
   worker_connections 1024; 
}

http {
    # resolver 8.8.8.8 valid=300s ipv6=off; # For local testing
    resolver 169.254.169.253 valid=300s ipv6=off;

    access_log /dev/stdout combined;

    init_by_lua_block {
        -- Define allowed upstreams globally
        allowed_upstreams = {
            ["169.254.170.2"] = true,
        }

        -- Define the rate limit (requests per second, burst limit)
        local limit_req = require "resty.limit.req"
        limiter, err = limit_req.new("limit_req_store", 200, 400)  -- âœ… 100 req/sec, burst 200
        if not limiter then
            ngx.log(ngx.ERR, "Failed to create rate limiter: ", err)
        end
    }

    lua_shared_dict limit_req_store 20m;

    server {
        listen 3128;

        server_name api.github.com;
        server_name github.com;
        server_name *.actions.githubusercontent.com;
        server_name codeload.github.com;
        server_name pkg.actions.githubusercontent.com;
        server_name ghcr.io;
        server_name results-receiver.actions.githubusercontent.com;
        server_name *.blob.core.windows.net;
        server_name objects.githubusercontent.com;
        server_name objects-origin.githubusercontent.com;
        server_name github-releases.githubusercontent.com;
        server_name github-registry-files.githubusercontent.com;
        server_name *.pkg.github.com;
        server_name pkg-containers.githubusercontent.com;
        server_name github-cloud.githubusercontent.com;
        server_name github-cloud.s3.amazonaws.com;
        server_name dependabot-actions.githubapp.com;

        proxy_connect;
        proxy_connect_allow 443;
        proxy_connect_timeout 60s;
        proxy_connect_data_timeout 60s;
        proxy_max_temp_file_size 0;
        
        location / {
            proxy_pass http://$http_host;
            proxy_set_header Host $http_host;
        }
    }

    server {
        listen 3128 default_server;

        proxy_connect;
        proxy_connect_response "HTTP/1.1 403\r\nForbidden: We can't let you out!!\r\n\r\n";

        error_page 502 = @blocked;
        error_page 403 = @blocked;

        location / {
            access_by_lua_block {
                local upstream = ngx.var.host

                -- Check if host is allowed
                if not allowed_upstreams[upstream] then
                    ngx.log(ngx.ERR, "Blocked upstream: ", upstream)
                    return ngx.exit(403)  -- Return 403 Forbidden
                end

                -- Apply Rate Limiting
                local delay, err = limiter:incoming(ngx.var.binary_remote_addr, true)
                if not delay then
                    ngx.log(ngx.ERR, "Rate limit exceeded for: ", ngx.var.remote_addr)
                    return ngx.exit(429)  -- Return 429 Too Many Requests
                end
            }
            proxy_pass http://$http_host;
            proxy_set_header Host $http_host;
        }

        location @blocked {
            default_type text/plain;
            return 403 "HTTP/1.1 403\r\nForbidden: We can't let you out!\r\n\r\n";
        }
    }
}
